import{z as f,A as p,c as m,B as y,h,C as b,f as g}from"./vue.esm-bundler-FW-u_CMv.js";import{u as v}from"./index-BeRudJ4f.js";const k=["title","datetime"],R=new Intl.DateTimeFormat("sv",{day:"numeric",month:"numeric",year:"numeric",hour:"numeric",hour12:!1,minute:"2-digit"}),w=new Intl.DateTimeFormat("sv",{day:"numeric",month:"numeric",year:"numeric"}),T=new Intl.RelativeTimeFormat("zh-CN",{numeric:"auto"}),s=[60,"second",60,"minute",24,"hour",7,"day",4.34524,"week",12,"month",1/0,"year"],l=f({__name:"RelativeTime",props:{autoRefresh:{default:0},threshold:{default:31536e3},value:{}},setup(n){const i=p(""),t=m(()=>typeof n.value=="number"?new Date(n.value):n.value),c=m(()=>R.format(t.value));function o(){let e=t.value.getTime()-Date.now();const u=e>0?1:-1;if(e=Math.abs(e/1e3),e>n.threshold)return i.value=w.format(t.value);let a=0;for(;a<s.length;a+=2){const d=s[a];if(e<d)break;e/=d}e=u*Math.floor(e),i.value=T.format(e,s[a+1])}return y(o),v(o,()=>n.autoRefresh),(e,u)=>(g(),h("time",{"data-allow-mismatch":"",title:c.value,datetime:t.value.toISOString()},b(i.value),9,k))}});l.__docgenInfo={exportName:"default",displayName:"RelativeTime",type:1,props:[{name:"autoRefresh",global:!1,description:"自动刷新间隔（毫秒），默认为 0 代表禁用。",tags:[],required:!1,type:"number | undefined",declarations:[],schema:{kind:"enum",type:"number | undefined",schema:["undefined","number"]}},{name:"threshold",global:!1,description:`如果时差（秒）大于该值，直接显示时刻，否则显示格式化后的时差。

默认是一年，设为 0 只显示时刻，设为 Infinity 只显示时差。`,tags:[],required:!1,type:"number | undefined",declarations:[],schema:{kind:"enum",type:"number | undefined",schema:["undefined","number"]}},{name:"value",global:!1,description:"时刻值，数字类型以毫秒作单位，不能为负数，可以大于当前时刻。",tags:[],required:!0,type:"number | Date",declarations:[],schema:{kind:"enum",type:"number | Date",schema:["number",{kind:"object",type:"Date"}]}},{name:"key",global:!0,description:"",tags:[],required:!1,type:"PropertyKey | undefined",declarations:[],schema:{kind:"enum",type:"PropertyKey | undefined",schema:["undefined","string","number","symbol"]}},{name:"ref",global:!0,description:"",tags:[],required:!1,type:"VNodeRef | undefined",declarations:[],schema:{kind:"enum",type:"VNodeRef | undefined",schema:["undefined","string","Ref<any, any>",{kind:"event",type:"(ref: Element | ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, ... 4 more ..., any> | null, refs: Record<...>): void"}]}},{name:"ref_for",global:!0,description:"",tags:[],required:!1,type:"boolean | undefined",declarations:[],schema:{kind:"enum",type:"boolean | undefined",schema:["undefined","false","true"]}},{name:"ref_key",global:!0,description:"",tags:[],required:!1,type:"string | undefined",declarations:[],schema:{kind:"enum",type:"string | undefined",schema:["undefined","string"]}},{name:"class",global:!0,description:"",tags:[],required:!1,type:"unknown",declarations:[],schema:"unknown"},{name:"style",global:!0,description:"",tags:[],required:!1,type:"unknown",declarations:[],schema:"unknown"}],events:[],slots:[],exposed:[{name:"value",type:"number | Date",description:"时刻值，数字类型以毫秒作单位，不能为负数，可以大于当前时刻。",declarations:[],schema:{kind:"enum",type:"number | Date",schema:["number",{kind:"object",type:"Date"}]}},{name:"autoRefresh",type:"number | undefined",description:"自动刷新间隔（毫秒），默认为 0 代表禁用。",declarations:[],schema:{kind:"enum",type:"number | undefined",schema:["undefined","number"]}},{name:"threshold",type:"number | undefined",description:`如果时差（秒）大于该值，直接显示时刻，否则显示格式化后的时差。

默认是一年，设为 0 只显示时刻，设为 Infinity 只显示时差。`,declarations:[],schema:{kind:"enum",type:"number | undefined",schema:["undefined","number"]}}],sourceFiles:"/home/runner/work/uikit/uikit/src/components/RelativeTime.vue"};const q={component:l,args:{value:Date.now()},argTypes:{value:{control:{type:"date"}},autoRefresh:{type:"number",control:{min:0,step:10}},threshold:{type:"number",control:{min:0}}}},r={};r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:"{}",...r.parameters?.docs?.source}}};const x=["RelativeTime"];export{r as RelativeTime,x as __namedExportsOrder,q as default};
